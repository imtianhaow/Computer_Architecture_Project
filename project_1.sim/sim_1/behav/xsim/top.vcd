$date
   Wed Apr  2 17:49:32 2025
$end

$version
  2024.2.0
  $dumpfile ("top.vcd") 
$end

$timescale
  1ps
$end

$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 16 % pc [15:0] $end
$var wire 16 & next_pc [15:0] $end
$var wire 16 ' pc_plus_2 [15:0] $end
$var wire 16 ( branch_target [15:0] $end
$var wire 16 ) jump_target [15:0] $end
$var wire 16 * temp_next_pc [15:0] $end
$var wire 16 + instruction [15:0] $end
$var wire 1 , RegWrite $end
$var wire 1 - MemtoReg $end
$var wire 1 . MemRead $end
$var wire 1 / MemWrite $end
$var wire 1 0 ALUSrc $end
$var wire 1 1 Branch $end
$var wire 1 2 Jump $end
$var wire 2 3 ALUOp [1:0] $end
$var wire 16 4 read_data1 [15:0] $end
$var wire 16 5 read_data2 [15:0] $end
$var wire 16 6 write_data [15:0] $end
$var wire 16 7 sign_extended_imm [15:0] $end
$var wire 16 8 shifted_imm [15:0] $end
$var wire 16 9 alu_result [15:0] $end
$var wire 1 : zero $end
$var wire 1 ; sign $end
$var wire 16 < mem_data [15:0] $end
$var wire 16 = alu_b [15:0] $end
$var wire 16 > sign_ext_addr [15:0] $end
$var wire 1 ? branch_taken $end
$scope module pc_unit $end
$var wire 1 # clk $end
$var wire 1 $ rst $end
$var wire 16 & next_pc [15:0] $end
$var reg 16 @ pc [15:0] $end
$upscope $end
$scope module imem_unit $end
$var wire 16 % address [15:0] $end
$var reg 16 A instruction [15:0] $end
$upscope $end
$scope module control_inst $end
$var wire 4 B opcode [15:12] $end
$var wire 4 C func [3:0] $end
$var reg 1 D RegWrite $end
$var reg 1 E MemtoReg $end
$var reg 1 F MemRead $end
$var reg 1 G MemWrite $end
$var reg 1 H ALUSrc $end
$var reg 1 I Branch $end
$var reg 1 J Jump $end
$var reg 2 K ALUOp [1:0] $end
$upscope $end
$scope module regfile_inst $end
$var wire 1 # clk $end
$var wire 4 L read_reg1 [7:4] $end
$var wire 4 M read_reg2 [11:8] $end
$var wire 4 M write_reg [11:8] $end
$var wire 16 6 write_data [15:0] $end
$var wire 1 , write_enable $end
$var reg 16 N read_data1 [15:0] $end
$var reg 16 O read_data2 [15:0] $end
$var integer 32 P i [31:0] $end
$upscope $end
$scope module sign_extend_inst $end
$var wire 4 C imm [3:0] $end
$var reg 16 Q extended [15:0] $end
$upscope $end
$scope module shift_left_inst $end
$var wire 16 7 in [15:0] $end
$var reg 16 R out [15:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 16 4 a [15:0] $end
$var wire 16 = b [15:0] $end
$var wire 2 3 control [1:0] $end
$var reg 16 S result [15:0] $end
$var wire 1 : zero $end
$var wire 1 ; sign $end
$upscope $end
$scope module dmem_inst $end
$var wire 1 # clk $end
$var wire 16 9 addr [15:0] $end
$var wire 16 5 write_data [15:0] $end
$var wire 1 . mem_read $end
$var wire 1 / mem_write $end
$var reg 16 T read_data [15:0] $end
$var integer 32 U i [31:0] $end
$upscope $end
$scope module plus2adder_inst $end
$var wire 16 % a [15:0] $end
$var reg 16 V sum [15:0] $end
$upscope $end
$scope module adder_pc $end
$var wire 16 ' a [15:0] $end
$var wire 16 8 b [15:0] $end
$var reg 16 W sum [15:0] $end
$upscope $end
$scope module mux_write_data $end
$var wire 16 9 in0 [15:0] $end
$var wire 16 < in1 [15:0] $end
$var wire 1 - sel $end
$var reg 16 X out [15:0] $end
$upscope $end
$scope module mux_next_pc_1 $end
$var wire 16 ' in0 [15:0] $end
$var wire 16 ( in1 [15:0] $end
$var wire 1 ? sel $end
$var reg 16 Y out [15:0] $end
$upscope $end
$scope module mux_next_pc_2 $end
$var wire 16 * in0 [15:0] $end
$var wire 16 ) in1 [15:0] $end
$var wire 1 2 sel $end
$var reg 16 Z out [15:0] $end
$upscope $end
$upscope $end
$scope task print_state $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
1"
0#
1$
bx %
bx &
bx '
bx (
bx )
bx *
bx +
x,
x-
x.
x/
x0
x1
x2
bx 3
bx 4
bx 5
bx 6
bx 7
bx 8
bx 9
x:
x;
b0 <
bx =
bx >
x?
bx @
bx A
bx B
bx C
xD
xE
xF
xG
xH
xI
xJ
bx K
bx L
bx M
bx N
bx O
b10000 P
bx Q
bx R
bx S
b0 T
b1000000 U
bx V
bx W
bx X
bx Y
bx Z
$end

#5000
1!
1#
b0 %
b10 &
b10 '
b110 (
b1000100110 )
b10 *
b11000100010010 +
1,
0-
0.
0/
10
01
02
b0 3
b0 4
b0 5
b10 6
b10 7
b100 8
b10 9
0:
0;
b10 =
b100010010 >
0?
b0 @
b11000100010010 A
b11 B
b10 C
1D
0E
0F
0G
1H
0I
0J
b0 K
b1 L
b1 M
b0 N
b0 O
b10 Q
b100 R
b10 S
b10 V
b110 W
b10 X
b10 Y
b10 Z

#10000
0!
0"
0#
0$

#15000
1!
1#
b10 %
b100 &
b100 '
b1100 (
b10001001100 )
b100 *
b11001000100100 +
b0 4
b0 5
b100 6
b100 7
b1000 8
b100 9
b100 =
b1000100100 >
b10 @
b11001000100100 A
b11 B
b100 C
b10 L
b10 M
b0 N
b0 O
b100 Q
b1000 R
b100 S
b100 V
b1100 W
b100 X
b100 Y
b100 Z

#20000
0!
0#

#25000
1!
1#
b100 %
b110 &
b110 '
b10100 (
b11001110100 )
b110 *
b11001100110111 +
b0 4
b0 5
b111 6
b111 7
b1110 8
b111 9
b111 =
b1100110111 >
b100 @
b11001100110111 A
b11 B
b111 C
b11 L
b11 M
b0 N
b0 O
b111 Q
b1110 R
b111 S
b110 V
b10100 W
b111 X
b110 Y
b110 Z

#30000
0!
0#

#35000
1!
1#
b110 %
b1000 &
b1000 '
b1000 (
b10000101000 )
b1000 *
b1000010000 +
00
b10 4
b100 5
b110 6
b0 7
b0 8
b110 9
b100 =
b1000010000 >
b110 @
b1000010000 A
b0 B
b0 C
0H
b1 L
b10 M
b10 N
b100 O
b0 Q
b0 R
b110 S
b1000 V
b1000 W
b110 X
b1000 Y
b1000 Z

#40000
0!
0#

#45000
1!
1#
b1000 %
b1010 &
b1010 '
b1100 (
b10001101100 )
b1010 *
b1000110001 +
b1 3
b111 4
b110 5
b1 6
b1 7
b10 8
b1 9
b110 =
b1000110001 >
b1000 @
b1000110001 A
b0 B
b1 C
b1 K
b11 L
b10 M
b111 N
b110 O
b1 Q
b10 R
b1 S
b1010 V
b1100 W
b1 X
b1010 Y
b1010 Z

#50000
0!
0#

#55000
1!
1#
b1010 %
b1100 &
b1100 '
b10000 (
b10000110000 )
b1100 *
b1000010010 +
b10 3
b10 4
b1 5
b100 6
b10 7
b100 8
b100 9
b1 =
b1000010010 >
b1010 @
b1000010010 A
b0 B
b10 C
b10 K
b1 L
b10 M
b10 N
b1 O
b10 Q
b100 R
b100 S
b1100 V
b10000 W
b100 X
b1100 Y
b1100 Z

#60000
0!
0#

#65000
1!
1#
b1100 %
b1110 &
b1110 '
b10100 (
b11001010100 )
b1110 *
b1100100011 +
b11 3
b100 4
b111 5
b11 7
b110 8
b111 =
b1100100011 >
b1100 @
b1100100011 A
b0 B
b11 C
b11 K
b10 L
b11 M
b100 N
b111 O
b11 Q
b110 R
b1110 V
b10100 W
b1110 Y
b1110 Z

#70000
0!
0#

#75000
1!
1#
b1110 %
b10000 &
b10000 '
b10010 (
b1001010010 )
b10000 *
b10000100100001 +
0,
1/
10
b0 3
b10 5
b101 6
b1 7
b10 8
b101 9
b1 =
b100100001 >
b1110 @
b10000100100001 A
b10 B
b1 C
0D
1G
1H
b0 K
b10 L
b1 M
b10 O
b1 Q
b10 R
b101 S
b10000 V
b10010 W
b101 X
b10000 Y
b10000 Z

#80000
0!
0#

#85000
1!
1#
b10000 %
b10010 &
b10010 '
b10010 (
b11001010010 )
b10010 *
b1001100100000 +
1,
1-
1.
0/
b100 5
b10 6
b0 7
b0 8
b100 9
b10 <
b0 =
b1100100000 >
b10000 @
b1001100100000 A
b1 B
b0 C
1D
1E
1F
0G
b10 L
b11 M
b100 O
b0 Q
b0 R
b100 S
b10 T
b10010 V
b10010 W
b10 X
b10010 Y
b10010 Z

#90000
0!
0#

#95000
1!
1#
b10010 %
b10110 &
b10100 '
b10110 (
b1001110110 )
b10110 *
b100000100110001 +
0,
0-
0.
00
11
b1 3
b10 4
b10 5
b0 6
b1 7
b10 8
b0 9
1:
b0 <
b10 =
b100110001 >
1?
b10010 @
b100000100110001 A
b100 B
b1 C
0D
0E
0F
0H
1I
b1 K
b11 L
b1 M
b10 N
b10 O
b1 Q
b10 R
b0 S
b0 T
b10100 V
b10110 W
b0 X
b10110 Y
b10110 Z

#100000
0!
0#

#105000
1!
1#
b10110 %
b11000 &
b11000 '
b100100 (
b10001100100 )
b11000 *
b11001000100110 +
1,
10
01
b0 3
b100 4
b100 5
b1010 6
b110 7
b1100 8
b1010 9
0:
b110 =
b1000100110 >
0?
b10110 @
b11001000100110 A
b11 B
b110 C
1D
1H
0I
b0 K
b10 L
b10 M
b100 N
b100 O
b110 Q
b1100 R
b1010 S
b11000 V
b100100 W
b1010 X
b11000 Y
b11000 Z

#110000
0!
0#

#115000
1!
1#
b11000 %
b11100 &
b11010 '
b11100 (
b1001011100 )
b11100 *
b101000100100001 +
0,
00
11
b1 3
b1010 4
b10 5
b1000 6
b1 7
b10 8
b1000 9
b10 =
b100100001 >
1?
b11000 @
b101000100100001 A
b101 B
b1 C
0D
0H
1I
b1 K
b10 L
b1 M
b1010 N
b10 O
b1 Q
b10 R
b1000 S
b11010 V
b11100 W
b1000 X
b11100 Y
b11100 Z

#120000
0!
0#

#125000
1!
1#
b11100 %
b11110 &
b11110 '
b101010 (
b10001101010 )
b11110 *
b11001000100110 +
1,
10
01
b0 3
b1010 5
b10000 6
b110 7
b1100 8
b10000 9
b110 =
b1000100110 >
0?
b11100 @
b11001000100110 A
b11 B
b110 C
1D
1H
0I
b0 K
b10 L
b10 M
b1010 O
b110 Q
b1100 R
b10000 S
b11110 V
b101010 W
b10000 X
b11110 Y
b11110 Z

#130000
0!
0#

#135000
1!
1#
b11110 %
b100010 &
b100000 '
b100010 (
b100010 )
b100000 *
b110000000000001 +
0,
00
12
b0 4
b0 5
b0 6
b1 7
b10 8
b0 9
1:
b0 =
b1 >
b11110 @
b110000000000001 A
b110 B
b1 C
0D
0H
1J
b0 L
b0 M
b0 N
b0 O
b1 Q
b10 R
b0 S
b100000 V
b100010 W
b0 X
b100000 Y
b100010 Z

#140000
0!
0#

#145000
1!
1#
b100010 %
b100100 &
b100100 '
b110000 (
b10001110000 )
b100100 *
b11001000100110 +
1,
10
02
b10000 4
b10000 5
b10110 6
b110 7
b1100 8
b10110 9
0:
b110 =
b1000100110 >
b100010 @
b11001000100110 A
b11 B
b110 C
1D
1H
0J
b10 L
b10 M
b10000 N
b10000 O
b110 Q
b1100 R
b10110 S
b100100 V
b110000 W
b10110 X
b100100 Y
b100100 Z

#150000
0!
0#

#155000
1!
1#
b100100 %
b100110 &
b100110 '
bx (
bx )
b100110 *
bx +
0,
00
bx 4
bx 5
bx 6
bx 7
bx0 8
bx 9
x:
x;
bx =
bx >
b100100 @
bx A
bx B
bx C
0D
0H
bx L
bx M
bx N
bx O
bx Q
bx0 R
bx S
b100110 V
bx W
bx X
b100110 Y
b100110 Z

#160000
0!
0#

#165000
1!
1#
b100110 %
b101000 &
b101000 '
b101000 *
b100110 @
b101000 V
b101000 Y
b101000 Z
