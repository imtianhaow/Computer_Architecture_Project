$date
   Tue Apr  8 13:12:02 2025
$end

$version
  2024.2.0
  $dumpfile ("top.vcd") 
$end

$timescale
  1ps
$end

$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$var wire 16 # leds [15:0] $end
$scope module uut $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var reg 16 & leds [15:0] $end
$var wire 16 ' pc [15:0] $end
$var wire 16 ( next_pc [15:0] $end
$var wire 16 ) pc_plus_2 [15:0] $end
$var wire 16 * branch_target [15:0] $end
$var wire 16 + jump_target [15:0] $end
$var wire 16 , temp_next_pc [15:0] $end
$var wire 16 - instruction [15:0] $end
$var wire 1 . RegWrite $end
$var wire 1 / MemtoReg $end
$var wire 1 0 MemRead $end
$var wire 1 1 MemWrite $end
$var wire 1 2 ALUSrc $end
$var wire 1 3 Branch $end
$var wire 1 4 Jump $end
$var wire 2 5 ALUOp [1:0] $end
$var wire 16 6 read_data1 [15:0] $end
$var wire 16 7 read_data2 [15:0] $end
$var wire 16 8 write_data [15:0] $end
$var wire 16 9 sign_extended_imm [15:0] $end
$var wire 16 : shifted_imm [15:0] $end
$var wire 16 ; alu_result [15:0] $end
$var wire 1 < zero $end
$var wire 1 = sign $end
$var wire 16 > mem_data [15:0] $end
$var wire 16 ? alu_b [15:0] $end
$var wire 16 @ sign_ext_addr [15:0] $end
$var wire 1 A branch_taken $end
$var reg 16 B captured_data [15:0] $end
$scope module pc_unit $end
$var wire 1 $ clk $end
$var wire 1 % rst $end
$var wire 16 ( next_pc [15:0] $end
$var reg 16 C pc [15:0] $end
$upscope $end
$scope module imem_unit $end
$var wire 16 ' address [15:0] $end
$var reg 16 D instruction [15:0] $end
$upscope $end
$scope module control_inst $end
$var wire 4 E opcode [15:12] $end
$var wire 4 F func [3:0] $end
$var reg 1 G RegWrite $end
$var reg 1 H MemtoReg $end
$var reg 1 I MemRead $end
$var reg 1 J MemWrite $end
$var reg 1 K ALUSrc $end
$var reg 1 L Branch $end
$var reg 1 M Jump $end
$var reg 2 N ALUOp [1:0] $end
$upscope $end
$scope module regfile_inst $end
$var wire 1 $ clk $end
$var wire 4 O read_reg1 [7:4] $end
$var wire 4 P read_reg2 [11:8] $end
$var wire 4 P write_reg [11:8] $end
$var wire 16 8 write_data [15:0] $end
$var wire 1 . write_enable $end
$var reg 16 Q read_data1 [15:0] $end
$var reg 16 R read_data2 [15:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module sign_extend_inst $end
$var wire 4 F imm [3:0] $end
$var reg 16 T extended [15:0] $end
$upscope $end
$scope module shift_left_inst $end
$var wire 16 9 in [15:0] $end
$var reg 16 U out [15:0] $end
$upscope $end
$scope module alu_inst $end
$var wire 16 6 a [15:0] $end
$var wire 16 ? b [15:0] $end
$var wire 2 5 control [1:0] $end
$var reg 16 V result [15:0] $end
$var wire 1 < zero $end
$var wire 1 = sign $end
$upscope $end
$scope module dmem_inst $end
$var wire 1 $ clk $end
$var wire 16 ; addr [15:0] $end
$var wire 16 7 write_data [15:0] $end
$var wire 1 0 mem_read $end
$var wire 1 1 mem_write $end
$var reg 16 W read_data [15:0] $end
$var integer 32 X i [31:0] $end
$upscope $end
$scope module plus2adder_inst $end
$var wire 16 ' a [15:0] $end
$var reg 16 Y sum [15:0] $end
$upscope $end
$scope module adder_pc $end
$var wire 16 ) a [15:0] $end
$var wire 16 : b [15:0] $end
$var reg 16 Z sum [15:0] $end
$upscope $end
$scope module mux_write_data $end
$var wire 16 ; in0 [15:0] $end
$var wire 16 > in1 [15:0] $end
$var wire 1 / sel $end
$var reg 16 [ out [15:0] $end
$upscope $end
$scope module mux_next_pc_1 $end
$var wire 16 ) in0 [15:0] $end
$var wire 16 * in1 [15:0] $end
$var wire 1 A sel $end
$var reg 16 \ out [15:0] $end
$upscope $end
$scope module mux_next_pc_2 $end
$var wire 16 , in0 [15:0] $end
$var wire 16 + in1 [15:0] $end
$var wire 1 4 sel $end
$var reg 16 ] out [15:0] $end
$upscope $end
$upscope $end
$scope task print_state $end
$upscope $end
$upscope $end
$enddefinitions $end

#0
$dumpvars
0!
1"
bx #
0$
1%
bx &
bx '
bx (
bx )
bx *
bx +
bx ,
bx -
x.
x/
x0
x1
x2
x3
x4
bx 5
bx 6
bx 7
bx 8
bx 9
bx :
bx ;
x<
x=
b0 >
bx ?
bx @
xA
bx B
bx C
bx D
bx E
bx F
xG
xH
xI
xJ
xK
xL
xM
bx N
bx O
bx P
bx Q
bx R
b10000 S
bx T
bx U
bx V
b0 W
b1000000 X
bx Y
bx Z
bx [
bx \
bx ]
$end

#5000
1!
1$
b0 '
b10 (
b10 )
b110 *
b1000100110 +
b10 ,
b11000100010010 -
1.
0/
00
01
12
03
04
b0 5
b0 6
b0 7
b10 8
b10 9
b100 :
b10 ;
0<
0=
b10 ?
b100010010 @
0A
b0 C
b11000100010010 D
b11 E
b10 F
1G
0H
0I
0J
1K
0L
0M
b0 N
b1 O
b1 P
b0 Q
b0 R
b10 T
b100 U
b10 V
b10 Y
b110 Z
b10 [
b10 \
b10 ]

#10000
0!
0"
b0 #
0$
0%
b0 &

#15000
1!
b0 #
1$
b0 &
b10 '
b100 (
b100 )
b1100 *
b10001001100 +
b100 ,
b11001000100100 -
b0 6
b0 7
b100 8
b100 9
b1000 :
b100 ;
b100 ?
b1000100100 @
b0 B
b10 C
b11001000100100 D
b11 E
b100 F
b10 O
b10 P
b0 Q
b0 R
b100 T
b1000 U
b100 V
b100 Y
b1100 Z
b100 [
b100 \
b100 ]

#20000
0!
0$

#25000
1!
1$
b100 '
b110 (
b110 )
b10100 *
b11001110100 +
b110 ,
b11001100110111 -
b0 6
b0 7
b111 8
b111 9
b1110 :
b111 ;
b111 ?
b1100110111 @
b100 C
b11001100110111 D
b11 E
b111 F
b11 O
b11 P
b0 Q
b0 R
b111 T
b1110 U
b111 V
b110 Y
b10100 Z
b111 [
b110 \
b110 ]

#30000
0!
0$

#35000
1!
1$
b110 '
b1000 (
b1000 )
b1000 *
b10000101000 +
b1000 ,
b1000010000 -
02
b10 6
b100 7
b110 8
b0 9
b0 :
b110 ;
b100 ?
b1000010000 @
b110 C
b1000010000 D
b0 E
b0 F
0K
b1 O
b10 P
b10 Q
b100 R
b0 T
b0 U
b110 V
b1000 Y
b1000 Z
b110 [
b1000 \
b1000 ]

#40000
0!
b100 #
0$
b100 &

#45000
1!
b100 #
1$
b100 &
b1000 '
b1010 (
b1010 )
b1100 *
b10001101100 +
b1010 ,
b1000110001 -
b1 5
b111 6
b110 7
b1 8
b1 9
b10 :
b1 ;
b110 ?
b1000110001 @
b100 B
b1000 C
b1000110001 D
b0 E
b1 F
b1 N
b11 O
b10 P
b111 Q
b110 R
b1 T
b10 U
b1 V
b1010 Y
b1100 Z
b1 [
b1010 \
b1010 ]

#50000
0!
b110 #
0$
b110 &

#55000
1!
b110 #
1$
b110 &
b1010 '
b1100 (
b1100 )
b10000 *
b10000110000 +
b1100 ,
b1000010010 -
b10 5
b10 6
b1 7
b100 8
b10 9
b100 :
b100 ;
b1 ?
b1000010010 @
b110 B
b1010 C
b1000010010 D
b0 E
b10 F
b10 N
b1 O
b10 P
b10 Q
b1 R
b10 T
b100 U
b100 V
b1100 Y
b10000 Z
b100 [
b1100 \
b1100 ]

#60000
0!
b1 #
0$
b1 &

#65000
1!
b1 #
1$
b1 &
b1100 '
b1110 (
b1110 )
b10100 *
b11001010100 +
b1110 ,
b1100100011 -
b11 5
b100 6
b111 7
b11 9
b110 :
b111 ?
b1100100011 @
b1 B
b1100 C
b1100100011 D
b0 E
b11 F
b11 N
b10 O
b11 P
b100 Q
b111 R
b11 T
b110 U
b1110 Y
b10100 Z
b1110 \
b1110 ]

#70000
0!
b111 #
0$
b111 &

#75000
1!
b111 #
1$
b111 &
b1110 '
b10000 (
b10000 )
b10010 *
b1001010010 +
b10000 ,
b10000100100001 -
0.
11
12
b0 5
b10 7
b101 8
b1 9
b10 :
b101 ;
b1 ?
b100100001 @
b111 B
b1110 C
b10000100100001 D
b10 E
b1 F
0G
1J
1K
b0 N
b10 O
b1 P
b10 R
b1 T
b10 U
b101 V
b10000 Y
b10010 Z
b101 [
b10000 \
b10000 ]

#80000
0!
b10 #
0$
b10 &

#85000
1!
b10 #
1$
b10 &
b10000 '
b10010 (
b10010 )
b10010 *
b11001010010 +
b10010 ,
b1001100100000 -
1.
1/
10
01
b100 7
b10 8
b0 9
b0 :
b100 ;
b10 >
b0 ?
b1100100000 @
b10 B
b10000 C
b1001100100000 D
b1 E
b0 F
1G
1H
1I
0J
b10 O
b11 P
b100 R
b0 T
b0 U
b100 V
b10 W
b10010 Y
b10010 Z
b10 [
b10010 \
b10010 ]

#90000
0!
b100 #
0$
b100 &

#95000
1!
b100 #
1$
b100 &
b10010 '
b10110 (
b10100 )
b10110 *
b1001110110 +
b10110 ,
b100000100110001 -
0.
0/
00
02
13
b1 5
b10 6
b10 7
b0 8
b1 9
b10 :
b0 ;
1<
b0 >
b10 ?
b100110001 @
1A
b100 B
b10010 C
b100000100110001 D
b100 E
b1 F
0G
0H
0I
0K
1L
b1 N
b11 O
b1 P
b10 Q
b10 R
b1 T
b10 U
b0 V
b0 W
b10100 Y
b10110 Z
b0 [
b10110 \
b10110 ]

#100000
0!
b10 #
0$
b10 &

#105000
1!
b10 #
1$
b10 &
b10110 '
b11000 (
b11000 )
b100100 *
b10001100100 +
b11000 ,
b11001000100110 -
1.
12
03
b0 5
b100 6
b100 7
b1010 8
b110 9
b1100 :
b1010 ;
0<
b110 ?
b1000100110 @
0A
b10 B
b10110 C
b11001000100110 D
b11 E
b110 F
1G
1K
0L
b0 N
b10 O
b10 P
b100 Q
b100 R
b110 T
b1100 U
b1010 V
b11000 Y
b100100 Z
b1010 [
b11000 \
b11000 ]

#110000
0!
b100 #
0$
b100 &

#115000
1!
b100 #
1$
b100 &
b11000 '
b11100 (
b11010 )
b11100 *
b1001011100 +
b11100 ,
b101000100100001 -
0.
02
13
b1 5
b1010 6
b10 7
b1000 8
b1 9
b10 :
b1000 ;
b10 ?
b100100001 @
1A
b100 B
b11000 C
b101000100100001 D
b101 E
b1 F
0G
0K
1L
b1 N
b10 O
b1 P
b1010 Q
b10 R
b1 T
b10 U
b1000 V
b11010 Y
b11100 Z
b1000 [
b11100 \
b11100 ]

#120000
0!
b10 #
0$
b10 &

#125000
1!
b10 #
1$
b10 &
b11100 '
b11110 (
b11110 )
b101010 *
b10001101010 +
b11110 ,
b11001000100110 -
1.
12
03
b0 5
b1010 7
b10000 8
b110 9
b1100 :
b10000 ;
b110 ?
b1000100110 @
0A
b10 B
b11100 C
b11001000100110 D
b11 E
b110 F
1G
1K
0L
b0 N
b10 O
b10 P
b1010 R
b110 T
b1100 U
b10000 V
b11110 Y
b101010 Z
b10000 [
b11110 \
b11110 ]

#130000
0!
b1010 #
0$
b1010 &

#135000
1!
b1010 #
1$
b1010 &
b11110 '
b100010 (
b100000 )
b100010 *
b100010 +
b100000 ,
b110000000000001 -
0.
02
14
b0 6
b0 7
b0 8
b1 9
b10 :
b0 ;
1<
b0 ?
b1 @
b1010 B
b11110 C
b110000000000001 D
b110 E
b1 F
0G
0K
1M
b0 O
b0 P
b0 Q
b0 R
b1 T
b10 U
b0 V
b100000 Y
b100010 Z
b0 [
b100000 \
b100010 ]

#140000
0!
b0 #
0$
b0 &

#145000
1!
b0 #
1$
b0 &
b100010 '
b100100 (
b100100 )
b110000 *
b10001110000 +
b100100 ,
b11001000100110 -
1.
12
04
b10000 6
b10000 7
b10110 8
b110 9
b1100 :
b10110 ;
0<
b110 ?
b1000100110 @
b0 B
b100010 C
b11001000100110 D
b11 E
b110 F
1G
1K
0M
b10 O
b10 P
b10000 Q
b10000 R
b110 T
b1100 U
b10110 V
b100100 Y
b110000 Z
b10110 [
b100100 \
b100100 ]

#150000
0!
b10000 #
0$
b10000 &

#155000
1!
b10000 #
1$
b10000 &
b100100 '
b100110 (
b100110 )
bx *
bx +
b100110 ,
bx -
0.
02
bx 6
bx 7
bx 8
bx 9
bx0 :
bx ;
x<
x=
bx ?
bx @
b10000 B
b100100 C
bx D
bx E
bx F
0G
0K
bx O
bx P
bx Q
bx R
bx T
bx0 U
bx V
b100110 Y
bx Z
bx [
b100110 \
b100110 ]

#160000
0!
bx #
0$
bx &
